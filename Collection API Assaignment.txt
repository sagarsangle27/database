Que.1


package GenericsAssignment;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Assignment1 {

	public static void main(String[] args) {
		List<MyClass> aL = new ArrayList<MyClass>();
		MyClass m1 = new MyClass(1,"Sagar");
		MyClass m2 = new MyClass(2,"Arpit");
		MyClass m3 = new MyClass(3,"Ankit");
		MyClass m4 = new MyClass(4,"Shubham");
		MyClass m5 = new MyClass(5,"Amol");
		aL.add(m1);
		aL.add(m2);
		aL.add(m3);
		aL.add(m4);
		aL.add(m5);
		Iterator<MyClass> itr = aL.iterator();	//Iterator is a Interface while iterator is a method in ArrayList
		while(itr.hasNext()) {
			System.out.println(itr.next());	//m1,m2,m3,m4,m5
		}
		try (FileOutputStream fos = new FileOutputStream("d:\\list8.txt")){
			try(ObjectOutputStream oos = new ObjectOutputStream(fos)){
				oos.writeObject(aL);
			}
		}
		catch(Exception e) {
			e.printStackTrace();
		}

		List<?> ref =null;
		try (FileInputStream fis = new FileInputStream("d:\\list8.txt")){
			try(ObjectInputStream ois = new ObjectInputStream(fis)){
				ref = (ArrayList<?>)ois.readObject();
			}
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		System.out.println("-+++++++++++++++++++++=");
		Iterator<?> itr2 =ref.iterator();	//Iterator is a Interface while iterator is a method in ArrayList
		while(itr2.hasNext()) {
			System.out.println(itr2.next());	//m1,m2,m3,m4,m5
		}
		
	}

}

class MyClass implements Serializable{
	private int rollNo;
	private String name;
	public MyClass(int rollNo, String name) {
		this.rollNo = rollNo;
		this.name = name;
	}
	@Override
	public String toString() {
		return "MyClass [rollNo=" + rollNo + ", name=" + name + "]";
	}
	public int getRollNo() {
		return rollNo;
	}
	public void setRollNo(int rollNo) {
		this.rollNo = rollNo;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}	
}




Que.2

import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Iterator;



public class HashDemo implements Serializable{

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Map<Integer,String> hm=new HashMap<Integer,String>();
		
		Scanner sc=new Scanner(System.in);
		Integer key=null;
		String value=null;
		for(int i=1;i<11;i++)
		{
			key=sc.nextInt();
			value=sc.next();
			hm.put(key, value);
		}
		
		Set<Entry<Integer,String>> s=hm.entrySet();
		Iterator<Entry<Integer,String>> itr=s.iterator();
		while(itr.hasNext())
		{
			System.out.println(itr.next());
			
		}
		try(FileOutputStream fos=new FileOutputStream("d:list3.txt"))
		{
			try(ObjectOutputStream oop=new ObjectOutputStream(fos))
			{
				oop.writeObject(hm);
				System.out.println("=====");
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	    Map hm2=null;
	    
	    try(FileInputStream fis=new FileInputStream("d:\\list3.txt"))
	     {
	    	 try(ObjectInputStream ois=new ObjectInputStream(fis))
	    	 {
	    		 
	    		hm2=(HashMap)ois.readObject(); 
	    		 
	    	 }
	     }
	     catch(Exception e)
	     {
	    	 e.printStackTrace();
	     }
	     Set<Entry<Integer,String>> s1=hm.entrySet();
	     Iterator<Entry<Integer,String>> itr1=s1.iterator();
		 while(itr1.hasNext())
		 {
			 System.out.println(itr1.next());
		 } 
	     
	}

}



Que.2a

import java.util.Map;
import java.util.Map.Entry;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.*;

public class Hashmap implements Serializable {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
		 Map<Integer,String> hm=new HashMap<Integer,String>();  
		
		 hm.put(123,"sagar");
		 hm.put(236, "amol");
		 hm.put(238, "aad");
		 hm.put(234, "amdf");
		 hm.put(231, "afg");
		 hm.put(239, "asd");
		 hm.put(230, "aqwel");
		 hm.put(212, "aerl");
		 hm.put(245, "aqel");
		 hm.put(278, "amqwel");
		 
		 Set<Entry<Integer,String>> s=hm.entrySet();
		 Iterator<Entry<Integer,String>> itr=s.iterator();
		 while(itr.hasNext())
		 {
			 System.out.println(itr.next());
		 }
	     try(FileOutputStream fos=new FileOutputStream("d:\\list5.txt"))
	     {
	    	 try(ObjectOutputStream oos=new ObjectOutputStream(fos))
	    	 {
	    		 oos.writeObject(hm);
	    		 System.out.println("====");
	    	 }
	     }
	     catch(Exception e)
	     {
	    	 e.printStackTrace();
	     }
	     
	     Map hm2=null;
	     try(FileInputStream fis=new FileInputStream("d:\\list5.txt"))
	     {
	    	 try(ObjectInputStream ois=new ObjectInputStream(fis))
	    	 {
	    		 
	    		hm2=(HashMap)ois.readObject(); 
	    		 
	    	 }
	     }
	     catch(Exception e)
	     {
	    	 e.printStackTrace();
	     }
	     Set<Entry<Integer,String>> s1=hm.entrySet();
	     Iterator<Entry<Integer,String>> itr1=s1.iterator();
		 while(itr1.hasNext())
		 {
			 System.out.println(itr1.next());
		 } 
	     
	}

}



Que.3



interface Game
{
	void play();
}

class Cricket implements Game
{
	public void play()
	{
		System.out.println("playing cricket");
	}
}

class Football implements Game
{
	public void play()
	{
		System.out.println("playing football");
	}
}

class Tennis implements Game
{
	public void play()
	{
		System.out.println("playing tennis");
	}
}

class Gen<T extends Game>
{
	private T gameObject;

	public Gen(T gameObject) {
		super();
		this.gameObject = gameObject;
	}

    public void  gamePlay()
    {
    	gameObject.play();
    }


}


public class Que3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Gen<Game> g1=new Gen(new Cricket());
		Gen<Game> g2=new Gen(new Football());
		Gen<Game> g3=new Gen(new Tennis());
		g1.gamePlay();
		g2.gamePlay();
		g3.gamePlay();
		
		
		
		
		
	}

}



Que.4


import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

class Employee implements Serializable
{
	int empid;
	String empname,design;
	double salary;
	public Employee(int empid, String empname, String design, double salary) {
		super();
		this.empid = empid;
		this.empname = empname;
		this.design = design;
		this.salary = salary;
	}
	@Override
	public String toString() {
		return "Employee [empid=" + empid + ", empname=" + empname + ", design=" + design + ", salary=" + salary + "]";
	}
	
	
	public String disp() {
		return "Employee [empid=" + empid + ", empname=" + empname + ", design=" + design + ", salary=" + salary + "]";
	}
	
	
}



public class Que4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		List l=new ArrayList();
		
	    Employee e1=new Employee(10,"abc","xyc",1200);
	    Employee e2=new Employee(20,"abc","xyc",1200);
	    Employee e3=new Employee(30,"abc","xyc",1200);
	    Employee e4=new Employee(40,"abc","xyc",1200);
		
		l.add(e1);
		l.add(e2);
		l.add(e3);
		l.add(e4);
		
	    
		Iterator itr=l.iterator();
		while(itr.hasNext())
		{
			System.out.println(itr.next());
		}
		
		try(FileOutputStream fos=new FileOutputStream("d:\\list7.txt"))
		{
			try(ObjectOutputStream oos=new ObjectOutputStream(fos))
			{
				oos.writeObject(l);
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	
		List l2=null;
		try(FileInputStream fis=new FileInputStream("d:\\list7.txt"))
		{
			try(ObjectInputStream ois=new ObjectInputStream(fis))
			{
				 l2 =(ArrayList)ois.readObject();
				 System.out.println("=========");
			}
		}
        catch(Exception e)
		{
        	e.printStackTrace();
		}
	
		Iterator itr1=l2.iterator();
		while(itr1.hasNext())
		{
			System.out.println(itr1.next());
		}
	    
		System.out.println("+++++++");
	    for(int i=0;i<l2.size();i++)
	    	System.out.println(((Employee) l2.get(i)).disp());
	
	}
	}



Que.5


import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.Set;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Iterator;



public class Quest5 implements Serializable{

	private static int i;

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		 Map<Integer,String> hm=new HashMap<Integer,String>();  
			
		 hm.put(1,"sachin");
		 hm.put(2, "ms dhoni");
		 hm.put(3, "rohit");
		 hm.put(4, "virat");
		 hm.put(5, "rahul");
		
		 
		Set<Entry<Integer,String>> s=hm.entrySet();
		Iterator<Entry<Integer,String>> itr=s.iterator();
		while(itr.hasNext())
		{
			System.out.println(itr.next());
			
		}
		try(FileOutputStream fos=new FileOutputStream("d:list9.txt"))
		{
			try(ObjectOutputStream oop=new ObjectOutputStream(fos))
			{
				oop.writeObject(hm);
				System.out.println("=====");
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	    Map hm2=null;
	    
	    try(FileInputStream fis=new FileInputStream("d:\\list9.txt"))
	     {
	    	 try(ObjectInputStream ois=new ObjectInputStream(fis))
	    	 {
	    		 
	    		hm2=(HashMap)ois.readObject(); 
	    	
	    	 }
	     }
	     catch(Exception e)
	     {
	    	 e.printStackTrace();
	     }
	     Set<Entry<Integer,String>> s1=hm.entrySet();
	     Iterator<Entry<Integer,String>> itr1=s1.iterator();
		 while(itr1.hasNext())
		 {
			 System.out.println(itr1.next());
		 } 
	     

		
		 
		 
		 
		 
		 
		 
	}
	}




